package ru.old.domain.handlers.roles.impl.creator.utils;

import org.springframework.stereotype.Component;
import old.domain.dto.BasicFileInfo;
import old.domain.dto.EditNodeInfo;

import java.util.List;
import java.util.stream.Collectors;

@Component
public class QuestMapService {

    //TODO —Ö—Ä–∞–Ω–∏—Ç—å –∏–º—è –±–æ—Ç–∞ –≤ –±–∞–∑–µ –∏ –¥–µ—Ä–∂–∞—Ç—å –≤ –ø–∞–º—è—Ç–∏
    private final static String BOT_NAME = "BrainBuster_bot";
    private final static String NO_CONTENT = "<i>- –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ -</i>";

    public String getQuestMapMenu(List<EditNodeInfo> infoList) {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("<b>–°–ø–∏—Å–æ–∫ —ç—Ç–∞–ø–æ–≤:</b>\n\n")
                .append(" ")
                .append(" ");

        for (int i = 0; i <infoList.size(); i++) {
            EditNodeInfo nodeInfo = infoList.get(i);

            stringBuilder
                    .append(getNodeEditMarker(nodeInfo)).append(" ")// —Å—Ç–æ–∏—Ç –ª–∏ –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫ –∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ —á—Ç–æ –Ω–æ–¥–∞ –Ω–µ –¥–æ–ø–∏—Å–∞–Ω–∞

                    //1) –°–æ–æ–±—â–µ–Ω–∏–µ [–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å]
                    .append("<b>").append(i).append(") </b>")
                    .append(nodeInfo.getType().getDisplayName())
                    .append(getNodeEditButton(nodeInfo)).append("\n")

                    .append(getNodeContent(nodeInfo)).append("\n") // —Ç–µ–∫—Å—Ç –Ω–æ–¥—ã, –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
                    .append(getControls(nodeInfo.getNodeId())) // –ø–æ–¥–Ω—è—Ç—å, –æ–ø—É—Å—Ç–∏—Ç—å, —É–¥–∞–ª–∏—Ç—å
                    .append(getNodeSpace()); // –ø–æ–¥–Ω—è—Ç—å, –æ–ø—É—Å—Ç–∏—Ç—å, —É–¥–∞–ª–∏—Ç—å
        }

        System.out.println(stringBuilder.toString());
        return stringBuilder.toString();
    }


    private String getNodeEditMarker(EditNodeInfo nodeInfo) {
        String DONE = "‚úÖ";
        String EMPTY = "‚ùó";
        return switch (nodeInfo.getType()) {
            case MESSAGE -> nodeInfo.getMainText() != null || nodeInfo.getMediaList() != null ? DONE : EMPTY;
            case POLL -> nodeInfo.getMainText() != null && nodeInfo.isPollAnswersPresent() ? DONE : EMPTY;
            case GEO -> nodeInfo.isGeoPointPresent() ? DONE : EMPTY;
            case MEDIA -> nodeInfo.getMediaList() != null && !nodeInfo.getMediaList().isEmpty()? DONE : EMPTY;
        };
    }

    private String getNodeEditButton(EditNodeInfo nodeInfo) {
        return "<a href=\"https://t.me/" + BOT_NAME + "?start=editCommand_editNode_" + nodeInfo.getNodeId() + "\">[—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å]</a>";
    }

    private String getNodeContent(EditNodeInfo nodeInfo) {
        return switch (nodeInfo.getType()) {
            case MESSAGE -> getMessageContent(nodeInfo);
            case POLL -> nodeInfo.getMainText() != null? "–í–æ–ø—Ä–æ—Å: <i>"+nodeInfo.getMainText()+"</i>": "–í–æ–ø—Ä–æ—Å: "+NO_CONTENT;
            case GEO -> nodeInfo.isGeoPointPresent() ? "–¢–æ—á–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–µ: <i>—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</i>" :"–¢–æ—á–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–µ: "+ NO_CONTENT;
            case MEDIA -> getMediaName(nodeInfo.getMediaList());
        };
    }

    private String getMessageContent(EditNodeInfo nodeInfo) {
        String result;
        if (nodeInfo.getMainText() != null) {
            result = "–¢–µ–∫—Å—Ç: <i>"+ nodeInfo.getMainText()+"</i>";
            return result;
        } else if (nodeInfo.getMediaList() != null && !nodeInfo.getMediaList().isEmpty()) {
            result = "–§–∞–π–ª(—ã): <i>"+getMediaName(nodeInfo.getMediaList())+"</i>";
        } else result = "–¢–µ–∫—Å—Ç: "+ NO_CONTENT;

        return result;
    }

    private String getMediaName(List<BasicFileInfo> mediaList) {
        return mediaList.stream()
                .map(file -> file.getFileName() != null ?
                        file.getFileName()+": "+getFileSize(file.getFileSize())+" –º–±\n" :
                        file.getMimeType()+": "+getFileSize(file.getFileSize())+" –º–±\n"
                )
                .collect(Collectors.joining());

    }

    private double getFileSize(Long size){
        return size == null ? 0.0 : Math.round((size / (1024.0 * 1024.0)) * 100) / 100.0;
    };

    private String getControls(Long nodeId) {
        return " üîº <a href=\"https://t.me/"+BOT_NAME+"?start=editCommand_moveUp_"+nodeId+"\">–ü–æ–¥–Ω—è—Ç—å</a>,   üîΩ <a href=\"https://t.me/"+BOT_NAME+"?start=editCommand_moveDown_"+nodeId+"\">–û–ø—É—Å—Ç–∏—Ç—å</a>\n"+
                "‚ùå <a href=\"https://t.me/"+BOT_NAME+"?start=editCommand_delete_"+nodeId+"\">–£–¥–∞–ª–∏—Ç—å</a>";
    }

    private String getNodeSpace() {
        return "\n--------------------\n\n";
    }
}
