package ru.zinoviev.quest.request.handler.domain.action.user;

import org.springframework.stereotype.Component;
import ru.zinoviev.quest.request.handler.domain.action.ActionDispatcher;
import ru.zinoviev.quest.request.handler.domain.DispatchKey;
import ru.zinoviev.quest.request.handler.domain.action.PropertiesReader;
import ru.zinoviev.quest.request.handler.domain.dto.request.MessageRequest;
import ru.zinoviev.quest.request.handler.domain.dto.request.RequestData;
import ru.zinoviev.quest.request.handler.domain.dto.response.SendMessageData;
import ru.zinoviev.quest.request.handler.domain.enums.RequestType;
import ru.zinoviev.quest.request.handler.domain.enums.UserRole;
import ru.zinoviev.quest.request.handler.transport.response.ResponsePublisher;

@Component
public class UserMessageActionDispatcher extends ActionDispatcher {

    public UserMessageActionDispatcher(ResponsePublisher publisher, PropertiesReader propertiesReader) {
        super(publisher, propertiesReader);
    }

    public void dispatch(RequestData request) {
        MessageRequest messageRequest = (MessageRequest) request;
        System.out.println("UserMessageActionDispatcher");

        if (messageRequest.getText() != null){
            textHandling(messageRequest);
        } else if (messageRequest.getPayloadObject() != null){
            payloadHandling(messageRequest);
        }
    }

    @Override
    public DispatchKey key() {
        return new DispatchKey(getRole(), RequestType.MESSAGE);
    }

    @Override
    public UserRole getRole() {
        return UserRole.USER;
    }

    private void textHandling(MessageRequest messageRequest) {
        if (messageRequest.getText().toLowerCase().equals(UserTextCommand.START)) {
            sendHello(messageRequest);
        } else {
            anyMessage(messageRequest);
        }
    }

    //TODO —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è,
    // —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è. –û –¥–∏–Ω–∞–º–∏–∫–µ —Ä–µ—á–∏ –Ω–µ—Ç, —É –Ω–∞—Å –ø–æ–∫–∞ —Å—Ç–∞—Ç–∏–∫–∞.
    // –ù–æ –µ—Å–ª–∏ –±—É–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ —Ç–æ
    private void anyMessage(MessageRequest messageRequest) {


        String response = "‚úÖ *–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:* \n\n" +
                "üìã /start: - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é" + "\n" +
                "*bold*\n" +
                "_italic_\n" +
                "[inline URL](http://www.example.com/)\n" +
                "`inline fixed-width code` " +"\n";

        sendResponse(SendMessageData.builder()
                .userId(messageRequest.getTelegramId())
                .message( escapeMarkdownV2( response ))
                .build());
    }

    private void sendHello(MessageRequest messageRequest) {
        String response = "*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–≤–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç!*\n\n" +
                "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –∫–≤–µ—Å—Ç—ã \n";


        sendResponse(SendMessageData.builder()
                .userId(messageRequest.getTelegramId())
                .message( escapeMarkdownV2( response ))
                .build());
    }

    private String escapeMarkdownV2(String text) {
        if (text == null) return "";
        return text.replaceAll("([-+\\\\=()#!{}.])", "\\\\$1");
    }

    private void payloadHandling(MessageRequest messageRequest) {

    }

    private void sendMainMenu(MessageRequest messageRequest) {
        sendResponse(SendMessageData.builder().build());
    }

    private void text(MessageRequest messageRequest) {

    }

}
